#include <string>
#include <fstream>
#include <iostream>
#include <vector>
#include <algorithm>

#include "map_reduce/protocol.h"

namespace mapReduce{
//
// The map function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. You should ignore the input file name,
// and look only at the contents argument. The return value is a slice
// of key/value pairs.
//
    std::vector<KeyVal> Map(const std::string &content) {
        // Your code goes here
        // Hints: split contents into an array of words.
        std::vector<KeyVal> ret;
        auto len = content.size();
        for (unsigned int i = 0; i < len; ++i) {
            if (!isalpha(content[i])) {
                continue;
            }
            std::string word = "";
            while (isalpha(content[i])) {
                word.push_back(content[i]);
                ++i;
            }
            ret.emplace_back(word, "1");
        }
        return ret;

    }

//
// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
//
    std::string Reduce(const std::string &key, const std::vector<std::string> &values) {
        // Your code goes here
        // Hints: return the number of occurrences of the word.
        std::string ret = "0";
        for(auto value : values){
            auto ret_int = std::stoi(ret);
            auto value_int = std::stoi(value);
            ret = std::to_string(ret_int + value_int);
        }
        return ret;
    }
}